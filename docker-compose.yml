version: '3.8'

services:
  # Aplicación principal
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "8006:8005"
    volumes:
      - ./src:/app/src
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/document_extractor
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - PORT=8005
      - HOST=0.0.0.0
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - app-network

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=document_extractor
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - app-network

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network

  # Worker para procesamiento asíncrono
  worker:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: python -m rq worker document_processing --url redis://redis:6379
    volumes:
      - ./src:/app/src
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/document_extractor
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - app-network

  # PgAdmin (opcional para desarrollo)
  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - dev

  # Nginx para producción (opcional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
