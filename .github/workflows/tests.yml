name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-spa
        sudo apt-get install -y poppler-utils

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install tesseract
        choco install poppler

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Download spaCy model
      run: |
        python -m spacy download es_core_news_sm

    - name: Run linting
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --max-complexity=10 --max-line-length=127 --statistics

    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports || true

    - name: Run security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json || true

    - name: Run tests
      env:
        PYTHONPATH: src
      run: |
        python run_tests.py --junitxml=junit/test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: junit/test-results-*.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.json
        flags: unittests
        name: codecov-umbrella

    - name: Generate coverage badge
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        pip install genbadge[coverage]
        genbadge coverage -i coverage.json -o coverage-badge.svg

    - name: Upload coverage badge
      uses: actions/upload-artifact@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        name: coverage-badge
        path: coverage-badge.svg

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install black isort flake8
    
    - name: Check code formatting with Black
      run: |
        black --check src/ tests/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only src/ tests/
    
    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --statistics





